#include <iostream>
#include <windows.h>

using namespace std;

struct item { //структура для описания элемента карты
	int s, c; //начальный и конечный узлы
	int v; //"вес" пути
};

const int m = 10; //количество путей по графу
struct item map[m] = { //все пути, нумерация узлов с нуля
 {1,2,3}, {1,3,2}, {2,4,5}, {2,5,2}, {3,6,1},
 {6,5,6}, {5,7,3}, {7,10,8}, {6,8,3},{8,9,4}
};
const int n = 8; //количество вершин графа
int road[n]; //номера узлов текущей "дороги"
bool incl[n]; //true, если i-ая вершина включена в путь
int way[n]; //искомый самый короткий путь
int waylen; //его длина
int start, finish; //начальная и конечная вершины
bool found;
int len; //найденный "вес" маршрута
int c_len; //текущий "вес" маршрута

int find(int s, int c) { //вес пути из s и c или 0, если пути нет
	for (int i = 0; i < m; i++)
		if (map[i].s == s && map[i].c == c ||
			map[i].s == c && map[i].c == s) return map[i].v;
	return 0;
}

void step(int s, int f, int p) { //рекурсивный поиск шага пути
	int c; //номер вершины, куда делаем шаг
	if (s == f) { //путь найден
		found = true; //поставить флажок "найдено"
		len = c_len; //запомнить общий вес пути
		waylen = p; //запомнить длину пути (количество узлов)
		for (int i = 0; i < waylen; i++) way[i] = road[i]; //запомнить сам путь
	}
	else { //выбор очередной точки
		for (c = 0; c < n; c++) { //проверяем все вершины
			int w = find(s, c); //есть ли путь из s в c
			if (w && !incl[c] && (len == 0 || c_len + w < len)) { //нужная точка не включена?
				road[p] = c; //включить точку в путь
				incl[c] = true; //пометить как включенную
				c_len += w; //учесть в общем весе пути
				step(c, f, p + 1); //вызвать себя для поиска следующей точки
				road[p] = 0; //вернуть всё как было
				incl[c] = false;
				c_len -= w;
			}
		}
	}
}

int ways(int a, int b) {
	//Инициализация данных:
	for (int i = 0; i < n; i++) {
		road[i] = way[i] = 0; incl[i] = false;
	}
	len = c_len = waylen = 0;

	start = a; //начало пути - нумерация с 0
	finish = b; //конец пути - нумерация с 0
	road[0] = start; //первую точку внесли в маршрут
	incl[start] = true; //и пометили как включённую
	found = false; //но путь пока не найден
	step(start, finish, 1); //ищем вторую точку

	if (found) {
		cout << "Way is";
		for (int i = 0; i < waylen; i++) cout << " " << way[i];
		cout << ", weight is " << len;
	}
	else cout << "Way not found!";
	cout << endl;

	return len;
}

int main() {
	//ways(1, 7);
	system("pause");
	return 0;
}